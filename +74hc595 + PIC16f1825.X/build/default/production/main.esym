D G "__PCM__" 0 0 ""5.025""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""24-Jan-15""
D G "__TIME__" 0 0 ""18:26:09""
D G "__16F1825" 0 0 "1" "#include <18F2550.h>"
c L "set_tris_a" 1 1 6 "FUNCTION"
v L "value" 1 39 "int8" `54 
f B "set_tris_a" 1 39 "void(int8 value)" `53 
v L "value" 1 40 "int8" `56 
f B "set_tris_c" 1 40 "void(int8 value)" `55 
f B "get_tris_a" 1 41 "int8()" `57 
f B "get_tris_c" 1 42 "int8()" `58 
v L "value" 1 43 "int8" `60 
f B "output_a" 1 43 "void(int8 value)" `59 
v L "value" 1 44 "int8" `62 
f B "output_c" 1 44 "void(int8 value)" `61 
f B "input_a" 1 45 "int8()" `63 
f B "input_c" 1 46 "int8()" `64 
f B "input_change_a" 1 47 "int8()" `65 
f B "input_change_c" 1 48 "int8()" `66 
v L "pin" 1 49 "int16" `68 
f B "input" 1 49 "int8(int16 pin)" `67 
v L "pin" 1 50 "int16" `70 
f B "input_state" 1 50 "int8(int16 pin)" `69 
v L "pin" 1 51 "int16" `72 
f B "output_low" 1 51 "void(int16 pin)" `71 
v L "pin" 1 52 "int16" `74 
f B "output_high" 1 52 "void(int16 pin)" `73 
v L "pin" 1 53 "int16" `76 
f B "output_toggle" 1 53 "void(int16 pin)" `75 
v L "pin" 1 54 "int16" `78 
v L "level" 1 54 "int8" `79 
f B "output_bit" 1 54 "void(int16 pin,int8 level)" `77 
v L "pin" 1 55 "int16" `81 
f B "output_float" 1 55 "void(int16 pin)" `80 
v L "pin" 1 56 "int16" `83 
f B "output_drive" 1 56 "void(int16 pin)" `82  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 60 "96"
d G "PIN_A1" 1 61 "97"
d G "PIN_A2" 1 62 "98"
d G "PIN_A3" 1 63 "99"
d G "PIN_A4" 1 64 "100"
d G "PIN_A5" 1 65 "101"
d G "PIN_C0" 1 67 "112"
d G "PIN_C1" 1 68 "113"
d G "PIN_C2" 1 69 "114"
d G "PIN_C3" 1 70 "115"
d G "PIN_C4" 1 71 "116"
d G "PIN_C5" 1 72 "117"
d G "FALSE" 1 75 "0"
d G "TRUE" 1 76 "1"
d G "BYTE" 1 78 "int8"
d G "BOOLEAN" 1 79 "int1"
d G "getc" 1 81 "getch"
d G "fgetc" 1 82 "getch"
d G "getchar" 1 83 "getch"
d G "putc" 1 84 "putchar"
d G "fputc" 1 85 "putchar"
d G "fgets" 1 86 "gets"
d G "fputs" 1 87 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 92 "int8()" `84 
f B "reset_cpu" 1 93 "void()" `85 
f B "sleep" 1 94 "void()" `86  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 96 "0x3C"
d G "BROWNOUT_RESTART" 1 97 "0x3E"
d G "MCLR_FROM_SLEEP" 1 98 "0x27"
d G "WDT_TIMEOUT" 1 99 "0x1F"
d G "WDT_FROM_SLEEP" 1 100 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 1 101 "0x2F"
d G "MCLR_FROM_RUN" 1 102 "0x37"
d G "RESET_INSTRUCTION" 1 103 "0x3B"
d G "STACK_OVERFLOW" 1 104 "0xBF"
d G "STACK_UNDERFLOW" 1 105 "0x7F"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 112 "int8" `88 
f B "setup_timer_0" 1 112 "void(int8 mode)" `87 
v L "value" 1 113 "int8" `90 
f B "set_timer0" 1 113 "void(int8 value)" `89 
f B "get_timer0" 1 114 "int8()" `91 
v L "mode" 1 115 "int8" `93 
v L "prescaler" 1 115 "int8" `94 
f B "setup_counters" 1 115 "void(int8 mode,int8 prescaler)" `92 
v L "value" 1 116 "int8" `96 
f B "set_rtcc" 1 116 "void(int8 value)" `95 
f B "get_rtcc" 1 117 "int8()" `97  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 119 "0"
d G "T0_EXT_L_TO_H" 1 120 "32"
d G "T0_EXT_H_TO_L" 1 121 "48"
d G "T0_DIV_1" 1 123 "8"
d G "T0_DIV_2" 1 124 "0"
d G "T0_DIV_4" 1 125 "1"
d G "T0_DIV_8" 1 126 "2"
d G "T0_DIV_16" 1 127 "3"
d G "T0_DIV_32" 1 128 "4"
d G "T0_DIV_64" 1 129 "5"
d G "T0_DIV_128" 1 130 "6"
d G "T0_DIV_256" 1 131 "7"
d G "T0_8_BIT" 1 134 "0"
d G "RTCC_INTERNAL" 1 136 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 137 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 138 "48"
d G "RTCC_DIV_1" 1 139 "8"
d G "RTCC_DIV_2" 1 140 "0"
d G "RTCC_DIV_4" 1 141 "1"
d G "RTCC_DIV_8" 1 142 "2"
d G "RTCC_DIV_16" 1 143 "3"
d G "RTCC_DIV_32" 1 144 "4"
d G "RTCC_DIV_64" 1 145 "5"
d G "RTCC_DIV_128" 1 146 "6"
d G "RTCC_DIV_256" 1 147 "7"
d G "RTCC_8_BIT" 1 148 "0"
c L "get_rtcc" 1 1 7 "FUNCTION"
v L "mode" 1 158 "int16" `99 
f B "setup_wdt" 1 158 "void(int16 mode)" `98 
f B "restart_wdt" 1 159 "void()" `100  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 161 "0x1000"
d G "WDT_OFF" 1 162 "0x2000"
d G "WDT_1MS" 1 164 "0x100"
d G "WDT_2MS" 1 165 "0x101"
d G "WDT_4MS" 1 166 "0x102"
d G "WDT_8MS" 1 167 "0x103"
d G "WDT_16MS" 1 168 "0x104"
d G "WDT_32MS" 1 169 "0x105"
d G "WDT_64MS" 1 170 "0x106"
d G "WDT_128MS" 1 171 "0x107"
d G "WDT_256MS" 1 172 "0x108"
d G "WDT_512MS" 1 173 "0x109"
d G "WDT_1S" 1 174 "0x10A"
d G "WDT_2S" 1 175 "0x10B"
d G "WDT_4S" 1 176 "0x10C"
d G "WDT_8S" 1 177 "0x10D"
d G "WDT_16S" 1 178 "0x10E"
d G "WDT_32S" 1 179 "0x10F"
d G "WDT_64S" 1 180 "0x110"
d G "WDT_128S" 1 181 "0x111"
d G "WDT_256S" 1 182 "0x112"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 187 "int16" `102 
f B "setup_timer_1" 1 187 "void(int16 mode)" `101 
f B "get_timer1" 1 188 "int16()" `103 
v L "value" 1 189 "int16" `105 
f B "set_timer1" 1 189 "void(int16 value)" `104  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 192 "0"
d G "T1_CAPSENSE" 1 193 "0xC5"
d G "T1_EXTERNAL" 1 194 "0x85"
d G "T1_EXTERNAL_SYNC" 1 195 "0x81"
d G "T1_FOSC" 1 196 "0x45"
d G "T1_INTERNAL" 1 197 "0x05"
d G "T1_ENABLE_T1OSC" 1 199 "0x08"
d G "T1_DIV_BY_1" 1 201 "0x00"
d G "T1_DIV_BY_2" 1 202 "0x10"
d G "T1_DIV_BY_4" 1 203 "0x20"
d G "T1_DIV_BY_8" 1 204 "0x30"
d G "T1_GATE" 1 206 "0x8000"
d G "T1_GATE_INVERTED" 1 207 "0xC000"
d G "T1_GATE_TOGGLE" 1 208 "0xA000"
d G "T1_GATE_SINGLE" 1 209 "0x9000"
d G "T1_GATE_TIMER0" 1 210 "0x8100"
d G "T1_GATE_COMP1" 1 211 "0x8200"
d G "T1_GATE_COMP2" 1 212 "0x8300"
d G "T1_GATE_A4" 1 214 "0"
d G "T1_GATE_A3" 1 215 "0x10000"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 220 "int8" `107 
v L "period" 1 220 "int8" `108 
v L "postscale" 1 220 "int8" `109 
f B "setup_timer_2" 1 220 "void(int8 mode,int8 period,int8 postscale)" `106 
f B "get_timer2" 1 221 "int8()" `110 
v L "value" 1 222 "int8" `112 
f B "set_timer2" 1 222 "void(int8 value)" `111  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 224 "0"
d G "T2_DIV_BY_1" 1 225 "4"
d G "T2_DIV_BY_4" 1 226 "5"
d G "T2_DIV_BY_16" 1 227 "6"
d G "T2_DIV_BY_64" 1 228 "7"
c L "set_timer2" 1 1 3 "FUNCTION"
v L "mode" 1 233 "int16" `114 
v L "period" 1 233 "int8" `115 
v L "postscaler" 1 233 "int8" `116 
f B "setup_timer_4" 1 233 "void(int16 mode,int8 period,int8 postscaler)" `113 
f B "get_timer4" 1 234 "int8()" `117 
v L "value" 1 235 "int8" `119 
f B "set_timer4" 1 235 "void(int8 value)" `118  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 1 237 "0"
d G "T4_DIV_BY_1" 1 238 "4"
d G "T4_DIV_BY_4" 1 239 "5"
d G "T4_DIV_BY_16" 1 240 "6"
d G "T4_DIV_BY_64" 1 241 "7"
c L "set_timer4" 1 1 3 "FUNCTION"
v L "mode" 1 246 "int16" `121 
v L "period" 1 246 "int8" `122 
v L "postscaler" 1 246 "int8" `123 
f B "setup_timer_6" 1 246 "void(int16 mode,int8 period,int8 postscaler)" `120 
f B "get_timer6" 1 247 "int8()" `124 
v L "value" 1 248 "int8" `126 
f B "set_timer6" 1 248 "void(int8 value)" `125  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 1 251 "0"
d G "T6_DIV_BY_1" 1 252 "4"
d G "T6_DIV_BY_4" 1 253 "5"
d G "T6_DIV_BY_16" 1 254 "6"
d G "T6_DIV_BY_64" 1 255 "7"
c L "set_timer6" 1 1 4 "FUNCTION"
v L "mode" 1 261 "int32" `128 
f B "setup_ccp1" 1 261 "void(int32 mode)" `127 
v L "mode" 1 262 "int32" `130 
v L "pwm" 1 262 "int8" `131 
f G "setup_ccp1" 1 262 "void(int32 mode,int8 pwm)" `129 
v L "value" 1 263 "int16" `133 
f B "set_pwm1_duty" 1 263 "void(int16 value)" `132  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 265 "0"
d G "CCP_CAPTURE_FE" 1 266 "0x04"
d G "CCP_CAPTURE_RE" 1 267 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 268 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 269 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 270 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 271 "0x09"
d G "CCP_COMPARE_INT" 1 272 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 273 "0x0B"
d G "CCP_PWM" 1 274 "0x0C"
d G "CCP_PWM_PLUS_1" 1 275 "0x1c"
d G "CCP_PWM_PLUS_2" 1 276 "0x2c"
d G "CCP_PWM_PLUS_3" 1 277 "0x3c"
d G "CCP_PWM_H_H" 1 283 "0x0c"
d G "CCP_PWM_H_L" 1 284 "0x0d"
d G "CCP_PWM_L_H" 1 285 "0x0e"
d G "CCP_PWM_L_L" 1 286 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 288 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 289 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 290 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 292 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 293 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 294 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 295 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 296 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 297 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 298 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 300 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 301 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 302 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 304 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 305 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 306 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 308 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 310 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 311 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 312 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 313 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 314 "0x10000000"
d G "CCP_TIMER2" 1 317 "0x0000"
d G "CCP_TIMER4" 1 318 "0x1000"
d G "CCP_TIMER6" 1 319 "0x2000"
d G "CCP_P1C_C3" 1 321 "0x000"
d G "CCP_P1C_C1" 1 322 "0x100"
d G "CCP_P1D_C2" 1 323 "0x000"
d G "CCP_P1D_C0" 1 324 "0x200"
d G "CCP2_C3" 1 325 "0x000"
d G "CCP2_A5" 1 326 "0x100"
d G "CCP_P2B_C2" 1 327 "0x000"
d G "CCP_P2B_A4" 1 328 "0x200"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
v L "mode" 1 332 "int32" `138 
f B "setup_ccp2" 1 332 "void(int32 mode)" `137 
v L "mode" 1 333 "int32" `140 
v L "pwm" 1 333 "int8" `141 
f G "setup_ccp2" 1 333 "void(int32 mode,int8 pwm)" `139 
v L "value" 1 334 "int16" `143 
f B "set_pwm2_duty" 1 334 "void(int16 value)" `142 
c L "set_pwm2_duty" 1 1 1 "FUNCTION"
v L "mode" 1 340 "int32" `148 
f B "setup_ccp3" 1 340 "void(int32 mode)" `147 
v L "mode" 1 341 "int32" `150 
v L "pwm" 1 341 "int8" `151 
f G "setup_ccp3" 1 341 "void(int32 mode,int8 pwm)" `149 
v L "value" 1 342 "int16" `153 
f B "set_pwm3_duty" 1 342 "void(int16 value)" `152 
c L "set_pwm3_duty" 1 1 1 "FUNCTION"
v L "mode" 1 348 "int32" `158 
f B "setup_ccp4" 1 348 "void(int32 mode)" `157 
v L "mode" 1 349 "int32" `160 
v L "pwm" 1 349 "int8" `161 
f G "setup_ccp4" 1 349 "void(int32 mode,int8 pwm)" `159 
v L "value" 1 350 "int16" `163 
f B "set_pwm4_duty" 1 350 "void(int16 value)" `162 
c L "set_pwm4_duty" 1 1 3 "FUNCTION"
v L "mode" 1 357 "int32" `168 
f B "setup_spi" 1 357 "void(int32 mode)" `167 
v L "value" 1 358 "int8" `170 
f B "spi_write" 1 358 "void(int8 value)" `169 
f B "spi_read" 1 359 "int8()" `171 
v L "value" 1 360 "int8" `173 
f G "spi_read" 1 360 "int8(int8 value)" `172 
f B "spi_data_in" 1 361 "int8()" `174  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 363 "0x00"
d G "SPI_MASTER" 1 364 "0x20"
d G "SPI_SLAVE" 1 365 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 366 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 367 "0x00"
d G "SPI_CLK_DIV_4" 1 368 "0x00"
d G "SPI_CLK_DIV_16" 1 369 "0x01"
d G "SPI_CLK_DIV_64" 1 370 "0x02"
d G "SPI_CLK_T2" 1 371 "0x03"
d G "SPI_SS_DISABLED" 1 372 "0x01"
d G "SPI_DO_C2" 1 374 "0x00000"
d G "SPI_DO_A4" 1 375 "0x10000"
d G "SPI_SS_C3" 1 376 "0x00000"
d G "SPI_SS_A3" 1 377 "0x20000"
d G "SPI_XMIT_L_TO_H" 1 379 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 380 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 382 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 383 "0x8000"
d G "SPI_L_TO_H" 1 386 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 387 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 1 2 "FUNCTION"
v L "baud" 1 391 "int32" `176 
f B "setup_uart" 1 391 "void(int32 baud)" `175 
v L "baud" 1 392 "int32" `178 
v L "stream" 1 392 "int8" `179 
f G "setup_uart" 1 392 "void(int32 baud,int8 stream)" `177 
v L "baud" 1 393 "int32" `181 
v L "stream" 1 393 "int8" `182 
v L "clock" 1 393 "int32" `183 
f G "setup_uart" 1 393 "void(int32 baud,int8 stream,int32 clock)" `180 
v L "baud" 1 394 "int32" `185 
f B "set_uart_speed" 1 394 "void(int32 baud)" `184 
v L "baud" 1 395 "int32" `187 
v L "stream" 1 395 "int8" `188 
f G "set_uart_speed" 1 395 "void(int32 baud,int8 stream)" `186 
v L "baud" 1 396 "int32" `190 
v L "stream" 1 396 "int8" `191 
v L "clock" 1 396 "int32" `192 
f G "set_uart_speed" 1 396 "void(int32 baud,int8 stream,int32 clock)" `189  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 400 "2"
d G "UART_DATA" 1 401 "4"
d G "UART_AUTODETECT" 1 402 "8"
d G "UART_AUTODETECT_NOWAIT" 1 403 "9"
d G "UART_WAKEUP_ON_RDA" 1 404 "10"
d G "UART_SEND_BREAK" 1 405 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
v L "mode" 1 409 "int32" `194 
f B "setup_comparator" 1 409 "void(int32 mode)" `193  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 412 "0x00"
d G "CP1_A1_A0" 1 415 "0x8000"
d G "CP1_C1_A0" 1 416 "0x8001"
d G "CP1_C2_A0" 1 417 "0x8002"
d G "CP1_C3_A0" 1 418 "0x8003"
d G "CP1_A1_DAC" 1 419 "0x8010"
d G "CP1_C1_DAC" 1 420 "0x8011"
d G "CP1_C2_DAC" 1 421 "0x8012"
d G "CP1_C3_DAC" 1 422 "0x8013"
d G "CP1_A1_FVR" 1 423 "0x8020"
d G "CP1_C1_FVR" 1 424 "0x8021"
d G "CP1_C2_FVR" 1 425 "0x8022"
d G "CP1_C3_FVR" 1 426 "0x8023"
d G "CP1_A1_VSS" 1 427 "0x8030"
d G "CP1_C1_VSS" 1 428 "0x8031"
d G "CP1_C2_VSS" 1 429 "0x8032"
d G "CP1_C3_VSS" 1 430 "0x8033"
d G "CP1_INT_L2H" 1 432 "0x0080"
d G "CP1_INT_H2L" 1 433 "0x0040"
d G "CP1_OUT_ON_A2" 1 434 "0x2000"
d G "CP1_INVERT" 1 435 "0x1000"
d G "CP1_FAST" 1 436 "0x0400"
d G "CP1_HYST" 1 437 "0x0200"
d G "CP1_SYNC" 1 438 "0x0100"
d G "CP2_A1_C0" 1 441 "0x80000000"
d G "CP2_C1_C0" 1 442 "0x80010000"
d G "CP2_C2_C0" 1 443 "0x80020000"
d G "CP2_C3_C0" 1 444 "0x80030000"
d G "CP2_A1_DAC" 1 445 "0x80100000"
d G "CP2_C1_DAC" 1 446 "0x80110000"
d G "CP2_C2_DAC" 1 447 "0x80120000"
d G "CP2_C3_DAC" 1 448 "0x80130000"
d G "CP2_A1_FVR" 1 449 "0x80200000"
d G "CP2_C1_FVR" 1 450 "0x80210000"
d G "CP2_C2_FVR" 1 451 "0x80220000"
d G "CP2_C3_FVR" 1 452 "0x80230000"
d G "CP2_A1_VSS" 1 453 "0x80300000"
d G "CP2_C1_VSS" 1 454 "0x80310000"
d G "CP2_C2_VSS" 1 455 "0x80320000"
d G "CP2_C3_VSS" 1 456 "0x80330000"
d G "CP2_INT_L2H" 1 458 "0x00800000"
d G "CP2_INT_H2L" 1 459 "0x00400000"
d G "CP2_OUT_ON_C4" 1 460 "0x20000000"
d G "CP2_INVERT" 1 461 "0x10000000"
d G "CP2_FAST" 1 462 "0x04000000"
d G "CP2_HYST" 1 463 "0x02000000"
d G "CP2_SYNC" 1 464 "0x01000000"
c L "setup_comparator" 1 1 2 "FUNCTION"
v L "mode" 1 471 "int8" `198 
f B "setup_vref" 1 471 "void(int8 mode)" `197  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 473 "0"
d G "VREF_ON" 1 474 "0x80"
d G "VREF_ADC_OFF" 1 476 "0"
d G "VREF_ADC_1v024" 1 477 "0x01"
d G "VREF_ADC_2v048" 1 478 "0x02"
d G "VREF_ADC_4v096" 1 479 "0x03"
d G "VREF_COMP_DAC_OFF" 1 481 "0"
d G "VREF_COMP_DAC_1v024" 1 482 "0x04"
d G "VREF_COMP_DAC_2v048" 1 483 "0x08"
d G "VREF_COMP_DAC_4v096" 1 484 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 1 486 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 1 487 "0x20"
d G "TEMPERATURE_RANGE_LOW" 1 488 "0"
d G "TEMPERATURE_RANGE_HIGH" 1 489 "0x10"
c L "setup_vref" 1 1 3 "FUNCTION"
v L "mode" 1 494 "int8" `200 
f B "setup_dac" 1 494 "void(int8 mode)" `199 
v L "value" 1 495 "int8" `202 
f B "dac_write" 1 495 "void(int8 value)" `201  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 497 "0"
d G "DAC_VSS_VDD" 1 498 "0x80"
d G "DAC_VREF_VDD" 1 499 "0x81"
d G "DAC_VSS_VREF" 1 500 "0x84"
d G "DAC_VREF_VREF" 1 501 "0x85"
d G "DAC_VSS_FVR" 1 502 "0x88"
d G "DAC_VREF_FVR" 1 503 "0x89"
d G "DAC_OUTPUT" 1 505 "0x20"
d G "DAC_LVP_POS" 1 506 "0x40"
d G "DAC_LVP_NEG" 1 507 "0"
c L "dac_write" 1 1 3 "FUNCTION"
v L "enable" 1 512 "int8" `204 
f B "setup_dsm" 1 512 "void(int8 enable)" `203 
v L "mode" 1 513 "int8" `206 
v L "source" 1 513 "int8" `207 
f G "setup_dsm" 1 513 "void(int8 mode,int8 source)" `205 
v L "mode" 1 514 "int8" `209 
v L "source" 1 514 "int8" `210 
v L "carrier" 1 514 "int16" `211 
f G "setup_dsm" 1 514 "void(int8 mode,int8 source,int16 carrier)" `208  "Constants used in SETUP_DSM() first param are:"
d G "DSM_ENABLED" 1 516 "0x80"
d G "DSM_DISABLED" 1 517 "0x00"
d G "DSM_OUTPUT_ENABLED" 1 518 "0x40"
d G "DSM_SLEW_RATE_LIMITING_ENABLED" 1 519 "0x20"
d G "DSM_OUTPUT_INVERTED" 1 520 "0x10"
d G "DSM_SOURCE_MANUAL" 1 522 "0x00"
d G "DSM_SOURCE_MDMIN" 1 523 "0x01"
d G "DSM_SOURCE_CCP1" 1 524 "0x02"
d G "DSM_SOURCE_CCP2" 1 525 "0x03"
d G "DSM_SOURCE_CCP3" 1 526 "0x04"
d G "DSM_SOURCE_CCP4" 1 527 "0x05"
d G "DSM_SOURCE_COMP1" 1 528 "0x06"
d G "DSM_SOURCE_COMP2" 1 529 "0x07"
d G "DSM_SOURCE_SPI1" 1 530 "0x08"
d G "DSM_SOURCE_SPI2" 1 531 "0x09"
d G "DSM_SOURCE_UART1" 1 532 "0x0A"
d G "DSM_DISABLE_SOURCE" 1 533 "0x80"
d G "DSM_CARRIER_LOW_VSS" 1 535 "0x0000"
d G "DSM_CARRIER_LOW_MDCIN1" 1 536 "0x0001"
d G "DSM_CARRIER_LOW_MDCIN2" 1 537 "0x0002"
d G "DSM_CARRIER_LOW_REFO" 1 538 "0x0003"
d G "DSM_CARRIER_LOW_CCP1" 1 539 "0x0004"
d G "DSM_CARRIER_LOW_CCP2" 1 540 "0x0005"
d G "DSM_CARRIER_LOW_CCP3" 1 541 "0x0006"
d G "DSM_CARRIER_LOW_CCP4" 1 542 "0x0007"
d G "DSM_SYNC_CARRIER_LOW" 1 543 "0x0020"
d G "DSM_INVERT_CARRIER_LOW" 1 544 "0x0040"
d G "DSM_DISABLE_CARRIER_LOW" 1 545 "0x0080"
d G "DSM_CARRIER_HIGH_VSS" 1 546 "0x0000"
d G "DSM_CARRIER_HIGH_MDCIN1" 1 547 "0x0100"
d G "DSM_CARRIER_HIGH_MDCIN2" 1 548 "0x0200"
d G "DSM_CARRIER_HIGH_REFO" 1 549 "0x0300"
d G "DSM_CARRIER_HIGH_CCP1" 1 550 "0x0400"
d G "DSM_CARRIER_HIGH_CCP2" 1 551 "0x0500"
d G "DSM_CARRIER_HIGH_CCP3" 1 552 "0x0600"
d G "DSM_CARRIER_HIGH_CCP4" 1 553 "0x0700"
d G "DSM_SYNC_CARRIER_HIGH" 1 554 "0x2000"
d G "DSM_INVERT_CARRIER_HIGH" 1 555 "0x4000"
d G "DSM_DISABLE_CARRIER_HIGH" 1 556 "0x8000"
c L "setup_dsm" 1 1 2 "FUNCTION"
v L "mode" 1 564 "int8" `215 
f B "setup_oscillator" 1 564 "void(int8 mode)" `214  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 567 "0"
d G "OSC_31250" 1 568 " (2*8)"
d G "OSC_62KHZ" 1 569 " (4*8)"
d G "OSC_125KHZ" 1 570 " (5*8)"
d G "OSC_250KHZ" 1 571 " (6*8)"
d G "OSC_500KHZ" 1 572 " (7*8)"
d G "OSC_1MHZ" 1 573 " (11*8)"
d G "OSC_2MHZ" 1 574 " (12*8)"
d G "OSC_4MHZ" 1 575 " (13*8)"
d G "OSC_8MHZ" 1 576 " (14*8)"
d G "OSC_16MHZ" 1 577 " (15*8)"
d G "OSC_TIMER1" 1 579 "1"
d G "OSC_INTRC" 1 580 "2"
d G "OSC_NORMAL" 1 581 "0"
d G "OSC_PLL_ON" 1 583 "0x80"
d G "OSC_PLL_OFF" 1 584 "0"
c L "setup_oscillator" 1 1 4 "FUNCTION"
v L "mode" 1 591 "int16" `217 
f B "setup_adc" 1 591 "void(int16 mode)" `216 
f B "read_adc" 1 592 "int8()" `218 
v L "mode" 1 593 "int8" `220 
f G "read_adc" 1 593 "int8(int8 mode)" `219 
f G "read_adc" 1 594 "int16()" `221 
v L "mode" 1 595 "int8" `223 
f G "read_adc" 1 595 "int16(int8 mode)" `222 
f B "adc_done" 1 596 "int8()" `224  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 598 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 599 "0x100"
d G "ADC_CLOCK_DIV_4" 1 600 "0x40"
d G "ADC_CLOCK_DIV_8" 1 601 "0x10"
d G "ADC_CLOCK_DIV_32" 1 602 "0x20"
d G "ADC_CLOCK_DIV_16" 1 603 "0x50"
d G "ADC_CLOCK_DIV_64" 1 604 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 605 "0x30" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
v L "pins" 1 608 "int32" `226 
f B "setup_adc_ports" 1 608 "void(int32 pins)" `225 
v L "pins" 1 609 "int32" `228 
v L "reference" 1 609 "int32" `229 
f G "setup_adc_ports" 1 609 "void(int32 pins,int32 reference)" `227 
v L "channel" 1 610 "int8" `231 
f B "set_adc_channel" 1 610 "void(int8 channel)" `230  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 614 "0x00010000" "| A0"
d G "sAN1" 1 615 "0x00020000" "| A1"
d G "sAN2" 1 616 "0x00040000" "| A2"
d G "sAN3" 1 617 "0x00100000" "| A4"
d G "sAN4" 1 618 "0x00000100" "| C0"
d G "sAN5" 1 619 "0x00000200" "| C1"
d G "sAN6" 1 620 "0x00000400" "| C2"
d G "sAN7" 1 621 "0x00000800" "| C3"
d G "NO_ANALOGS" 1 622 "0" "None"
d G "ALL_ANALOG" 1 623 "0x00170F00" "A0 A1 A2 A4 C0 C1 C2 C3"
d G "VSS_VDD" 1 626 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 1 627 "0x02000000" "| Range 0-VrefH"
d G "VSS_FVR" 1 628 "0x03000000" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 1 629 "0x04000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 1 630 "0x06000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 1 631 "0x07000000" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 1 635 "0x1D"
d G "DAC_CHANNEL" 1 636 "0x1E"
d G "FVR_CHANNEL" 1 637 "0x1F"
d G "ADC_START_AND_READ" 1 640 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 641 "1"
d G "ADC_READ_ONLY" 1 642 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 648 "sint8" `233 
f B "abs" 1 648 "sint8(sint8 x)" `232 
v L "x" 1 649 "sint16" `235 
f G "abs" 1 649 "sint16(sint16 x)" `234 
v L "x" 1 650 "sint32" `237 
f G "abs" 1 650 "sint32(sint32 x)" `236 
v L "x" 1 651 "float" `239 
f G "abs" 1 651 "float(float x)" `238 
v L "??65535" 1 652 "int8" `241 
v L "??65535" 1 652 "int8" `242 
f B "_mul" 1 652 "int16(int8 ,int8 )" `240 
v L "??65535" 1 653 "sint8" `241 
v L "??65535" 1 653 "sint8" `245 
f G "_mul" 1 653 "sint16(sint8 ,sint8 )" `243 
v L "??65535" 1 654 "int16" `241 
v L "??65535" 1 654 "int16" `248 
f G "_mul" 1 654 "int32(int16 ,int16 )" `246 
v L "??65535" 1 655 "sint16" `241 
v L "??65535" 1 655 "sint16" `251 
f G "_mul" 1 655 "sint32(sint16 ,sint16 )" `249  "Memory Manipulation Prototypes:"
v L "bank" 1 658 "int8" `253 
v L "offset" 1 658 "int8" `254 
f B "read_bank" 1 658 "int8(int8 bank,int8 offset)" `252 
v L "bank" 1 659 "int8" `256 
v L "offset" 1 659 "int8" `257 
v L "value" 1 659 "int8" `258 
f B "write_bank" 1 659 "void(int8 bank,int8 offset,int8 value)" `255 
v L "dest" 1 660 "*int8" `260 
v L "src" 1 660 "*int8" `261 
f B "strcpy" 1 660 "void(*int8 dest,*int8 src)" `259 
v L "dest" 1 661 "*int8" `263 
v L "src" 1 661 "*int8" `264 
f B "strcopy" 1 661 "void(*int8 dest,*int8 src)" `262 
v L "destination" 1 662 "*int8" `266 
v L "value" 1 662 "int8" `267 
v L "num" 1 662 "int16" `268 
f B "memset" 1 662 "void(*int8 destination,int8 value,int16 num)" `265 
v L "destination" 1 663 "*int8" `270 
v L "source" 1 663 "*int8" `271 
v L "num" 1 663 "int16" `272 
f B "memcpy" 1 663 "void(*int8 destination,*int8 source,int16 num)" `269  "String Prototypes:"
v L "cvalue" 1 666 "int8" `274 
f B "toupper" 1 666 "int8(int8 cvalue)" `273 
v L "cvalue" 1 667 "int8" `276 
f B "tolower" 1 667 "int8(int8 cvalue)" `275 
v L "string" 1 668 "*int8" `278 
v L "cstring" 1 668 "*int8" `279 
f B "sprintf" 1 668 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `277  "Data Manipulators Prototypes:"
v L "address" 1 671 "*int8" `282 
v L "bytes" 1 671 "int8" `283 
v L "value" 1 671 "int8" `284 
f B "shift_left" 1 671 "int8(*int8 address,int8 bytes,int8 value)" `281 
v L "address" 1 672 "*int8" `286 
v L "bytes" 1 672 "int8" `287 
v L "value" 1 672 "int8" `288 
f B "shift_right" 1 672 "int8(*int8 address,int8 bytes,int8 value)" `285 
v L "address" 1 673 "*int8" `290 
v L "bytes" 1 673 "int8" `291 
f B "rotate_left" 1 673 "void(*int8 address,int8 bytes)" `289 
v L "address" 1 674 "*int8" `293 
v L "bytes" 1 674 "int8" `294 
f B "rotate_right" 1 674 "void(*int8 address,int8 bytes)" `292 
v L "value" 1 675 "int8" `296 
f B "swap" 1 675 "void(int8 value)" `295 
v L "var" 1 676 "int16" `298 
v L "offset" 1 676 "int8" `299 
f B "make8" 1 676 "int8(int16 var,int8 offset)" `297 
v L "var" 1 677 "int32" `298 
v L "offset" 1 677 "int8" `302 
f G "make8" 1 677 "int8(int32 var,int8 offset)" `300 
v L "varhigh" 1 678 "int8" `304 
v L "varlow" 1 678 "int8" `305 
f B "make16" 1 678 "int16(int8 varhigh,int8 varlow)" `303 
v L "var1" 1 679 "int16" `307 
f B "make32" 1 679 "int32(int16 var1)" `306 
v L "var1" 1 680 "int16" `309 
v L "var2" 1 680 "int16" `310 
f G "make32" 1 680 "int32(int16 var1,int16 var2)" `308 
v L "var1" 1 681 "int16" `309 
v L "var2" 1 681 "int8" `313 
f G "make32" 1 681 "int32(int16 var1,int8 var2)" `311 
v L "var1" 1 682 "int16" `315 
v L "var2" 1 682 "int8" `316 
v L "var3" 1 682 "int8" `317 
f G "make32" 1 682 "int32(int16 var1,int8 var2,int8 var3)" `314 
v L "var1" 1 683 "int8" `319 
f G "make32" 1 683 "int32(int8 var1)" `318 
v L "var1" 1 684 "int8" `309 
v L "var2" 1 684 "int8" `322 
f G "make32" 1 684 "int32(int8 var1,int8 var2)" `320 
v L "var1" 1 685 "int8" `315 
v L "var2" 1 685 "int8" `316 
v L "var3" 1 685 "int8" `326 
f G "make32" 1 685 "int32(int8 var1,int8 var2,int8 var3)" `323 
v L "var1" 1 686 "int8" `328 
v L "var2" 1 686 "int8" `329 
v L "var3" 1 686 "int8" `330 
v L "var4" 1 686 "int8" `331 
f G "make32" 1 686 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `327 
v L "var1" 1 687 "int8" `309 
v L "var2" 1 687 "int16" `334 
f G "make32" 1 687 "int32(int8 var1,int16 var2)" `332 
v L "var1" 1 688 "int8" `315 
v L "var2" 1 688 "int16" `316 
v L "var3" 1 688 "int8" `338 
f G "make32" 1 688 "int32(int8 var1,int16 var2,int8 var3)" `335 
v L "var1" 1 689 "int8" `315 
v L "var2" 1 689 "int8" `316 
v L "var3" 1 689 "int16" `342 
f G "make32" 1 689 "int32(int8 var1,int8 var2,int16 var3)" `339 
v L "var" 1 690 "int8" `344 
v L "bit" 1 690 "int8" `345 
f B "bit_set" 1 690 "void(int8 var,int8 bit)" `343 
v L "var" 1 691 "int16" `344 
v L "bit" 1 691 "int8" `348 
f G "bit_set" 1 691 "void(int16 var,int8 bit)" `346 
v L "var" 1 692 "int32" `344 
v L "bit" 1 692 "int8" `351 
f G "bit_set" 1 692 "void(int32 var,int8 bit)" `349 
v L "var" 1 693 "int8" `353 
v L "bit" 1 693 "int8" `354 
f B "bit_clear" 1 693 "void(int8 var,int8 bit)" `352 
v L "var" 1 694 "int16" `353 
v L "bit" 1 694 "int8" `357 
f G "bit_clear" 1 694 "void(int16 var,int8 bit)" `355 
v L "var" 1 695 "int32" `353 
v L "bit" 1 695 "int8" `360 
f G "bit_clear" 1 695 "void(int32 var,int8 bit)" `358 
v L "var" 1 696 "int8" `362 
v L "bit" 1 696 "int8" `363 
f B "bit_test" 1 696 "int8(int8 var,int8 bit)" `361 
v L "var" 1 697 "int16" `362 
v L "bit" 1 697 "int8" `366 
f G "bit_test" 1 697 "int8(int16 var,int8 bit)" `364 
v L "var" 1 698 "int32" `362 
v L "bit" 1 698 "int8" `369 
f G "bit_test" 1 698 "int8(int32 var,int8 bit)" `367  "#use delay() Prototypes:"
v L "count" 1 701 "int8" `371 
f B "delay_cycles" 1 701 "void(int8 count)" `370 
v L "time" 1 702 "int16" `373 
f B "delay_ms" 1 702 "void(int16 time)" `372 
v L "time" 1 703 "int16" `375 
f B "delay_us" 1 703 "void(int16 time)" `374  "#use rs232() Prototypes:"
v L "cdata" 1 706 "int8" `377 
f B "putchar" 1 706 "void(int8 cdata)" `376 
v L "cdata" 1 707 "int8" `379 
v L "stream" 1 707 "int8" `380 
f G "putchar" 1 707 "void(int8 cdata,int8 stream)" `378 
v L "string" 1 708 "*int8" `382 
f B "puts" 1 708 "void(*int8 string)" `381 
v L "string" 1 709 "*int8" `384 
v L "stream" 1 709 "int8" `385 
f G "puts" 1 709 "void(*int8 string,int8 stream)" `383 
f B "getch" 1 710 "int8()" `386 
v L "stream" 1 711 "int8" `388 
f G "getch" 1 711 "int8(int8 stream)" `387 
v L "string" 1 712 "*int8" `390 
f B "gets" 1 712 "void(*int8 string)" `389 
v L "string" 1 713 "*int8" `392 
v L "stream" 1 713 "int8" `393 
f G "gets" 1 713 "void(*int8 string,int8 stream)" `391 
f B "kbhit" 1 714 "int8()" `394 
v L "stream" 1 715 "int8" `396 
f G "kbhit" 1 715 "int8(int8 stream)" `395 
v L "string" 1 716 "*int8" `398 
f B "printf" 1 716 "void(*int8 string,*int8 _VA_LIST)" `397 
v L "stream" 1 717 "int8" `401 
v L "string" 1 717 "*int8" `402 
f B "fprintf" 1 717 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `400 
f B "putc_send" 1 718 "void()" `404 
v L "stream" 1 719 "int8" `406 
f B "fputc_send" 1 719 "void(int8 stream)" `405 
f B "rcv_buffer_full" 1 720 "int8()" `407 
v L "stream" 1 721 "int8" `409 
f G "rcv_buffer_full" 1 721 "int8(int8 stream)" `408 
f B "rcv_buffer_bytes" 1 722 "int16()" `410 
v L "stream" 1 723 "int8" `412 
f G "rcv_buffer_bytes" 1 723 "int16(int8 stream)" `411 
f B "tx_buffer_full" 1 724 "int8()" `413 
v L "stream" 1 725 "int8" `415 
f G "tx_buffer_full" 1 725 "int8(int8 stream)" `414 
f B "tx_buffer_bytes" 1 726 "int16()" `416 
v L "stream" 1 727 "int8" `418 
f G "tx_buffer_bytes" 1 727 "int16(int8 stream)" `417  "#use i2c() Prototypes:"
f B "i2c_read" 1 730 "int8()" `419 
v L "stream" 1 731 "int8" `421 
f G "i2c_read" 1 731 "int8(int8 stream)" `420 
v L "stream" 1 732 "int8" `423 
v L "ack" 1 732 "int8" `424 
f G "i2c_read" 1 732 "int8(int8 stream,int8 ack)" `422 
v L "data" 1 733 "int8" `426 
f B "i2c_write" 1 733 "int8(int8 data)" `425 
v L "stream" 1 734 "int8" `428 
v L "data" 1 734 "int8" `429 
f G "i2c_write" 1 734 "int8(int8 stream,int8 data)" `427 
f B "i2c_start" 1 735 "void()" `430 
v L "stream" 1 736 "int8" `432 
f G "i2c_start" 1 736 "void(int8 stream)" `431 
v L "stream" 1 737 "int8" `434 
v L "restart" 1 737 "int8" `435 
f G "i2c_start" 1 737 "void(int8 stream,int8 restart)" `433 
f B "i2c_stop" 1 738 "void()" `436 
v L "stream" 1 739 "int8" `438 
f G "i2c_stop" 1 739 "void(int8 stream)" `437 
f B "i2c_isr_state" 1 740 "int8()" `439 
v L "addr" 1 741 "int8" `441 
f B "i2c_slaveaddr" 1 741 "void(int8 addr)" `440 
v L "stream" 1 742 "int8" `443 
v L "addr" 1 742 "int8" `444 
f G "i2c_slaveaddr" 1 742 "void(int8 stream,int8 addr)" `442 
f B "i2c_poll" 1 743 "int8()" `445 
v L "stream" 1 744 "int8" `447 
f G "i2c_poll" 1 744 "int8(int8 stream)" `446 
v L "baud" 1 745 "int32" `449 
f B "i2c_init" 1 745 "void(int32 baud)" `448 
v L "stream" 1 746 "int8" `451 
v L "baud" 1 746 "int32" `452 
f G "i2c_init" 1 746 "void(int8 stream,int32 baud)" `450  "#use spi() Prototypes:"
f B "spi_xfer" 1 749 "int8()" `453 
f G "spi_xfer" 1 750 "int16()" `454 
f G "spi_xfer" 1 751 "int32()" `455 
v L "data" 1 752 "int8" `457 
f G "spi_xfer" 1 752 "int8(int8 data)" `456 
v L "data" 1 753 "int16" `459 
f G "spi_xfer" 1 753 "int16(int16 data)" `458 
v L "data" 1 754 "int32" `461 
f G "spi_xfer" 1 754 "int32(int32 data)" `460 
v L "stream" 1 755 "int8" `463 
v L "data" 1 755 "int8" `464 
f G "spi_xfer" 1 755 "int8(int8 stream,int8 data)" `462 
v L "stream" 1 756 "int8" `463 
v L "data" 1 756 "int16" `467 
f G "spi_xfer" 1 756 "int16(int8 stream,int16 data)" `465 
v L "stream" 1 757 "int8" `463 
v L "data" 1 757 "int32" `470 
f G "spi_xfer" 1 757 "int32(int8 stream,int32 data)" `468 
v L "stream" 1 758 "int8" `472 
v L "data" 1 758 "int8" `473 
v L "bits" 1 758 "int8" `474 
f G "spi_xfer" 1 758 "int8(int8 stream,int8 data,int8 bits)" `471 
v L "stream" 1 759 "int8" `472 
v L "data" 1 759 "int16" `473 
v L "bits" 1 759 "int8" `478 
f G "spi_xfer" 1 759 "int16(int8 stream,int16 data,int8 bits)" `475 
v L "stream" 1 760 "int8" `472 
v L "data" 1 760 "int32" `473 
v L "bits" 1 760 "int8" `482 
f G "spi_xfer" 1 760 "int32(int8 stream,int32 data,int8 bits)" `479 
v L "baud" 1 761 "int32" `484 
f B "spi_init" 1 761 "void(int32 baud)" `483 
v L "stream" 1 762 "int8" `486 
v L "baud" 1 762 "int32" `487 
f G "spi_init" 1 762 "void(int8 stream,int32 baud)" `485 
v L "baud" 1 763 "int32" `489 
f B "spi_speed" 1 763 "void(int32 baud)" `488 
v L "stream" 1 764 "int8" `491 
v L "baud" 1 764 "int32" `492 
f G "spi_speed" 1 764 "void(int8 stream,int32 baud)" `490 
v L "stream" 1 765 "int8" `494 
v L "baud" 1 765 "int32" `495 
v L "clock" 1 765 "int32" `496 
f G "spi_speed" 1 765 "void(int8 stream,int32 baud,int32 clock)" `493 
v L "data" 1 766 "int8" `498 
f B "spi_prewrite" 1 766 "void(int8 data)" `497 
v L "data" 1 767 "int16" `500 
f G "spi_prewrite" 1 767 "void(int16 data)" `499 
v L "data" 1 768 "int32" `502 
f G "spi_prewrite" 1 768 "void(int32 data)" `501 
v L "??65535" 1 769 "int8" `504 
v L "data" 1 769 "int8" `505 
f G "spi_prewrite" 1 769 "void(int8 ,int8 data)" `503 
v L "??65535" 1 770 "int8" `504 
v L "data" 1 770 "int16" `508 
f G "spi_prewrite" 1 770 "void(int8 ,int16 data)" `506 
v L "??65535" 1 771 "int8" `504 
v L "data" 1 771 "int32" `511 
f G "spi_prewrite" 1 771 "void(int8 ,int32 data)" `509 
f B "spi_xfer_in" 1 772 "int8()" `512 
f G "spi_xfer_in" 1 773 "int16()" `513 
f G "spi_xfer_in" 1 774 "int32()" `514 
v L "bits" 1 775 "int8" `516 
f G "spi_xfer_in" 1 775 "int8(int8 bits)" `515 
v L "bits" 1 776 "int8" `518 
f G "spi_xfer_in" 1 776 "int16(int8 bits)" `517 
v L "bits" 1 777 "int8" `520 
f G "spi_xfer_in" 1 777 "int32(int8 bits)" `519 
v L "stream" 1 778 "int8" `522 
v L "bits" 1 778 "int8" `523 
f G "spi_xfer_in" 1 778 "int8(int8 stream,int8 bits)" `521 
v L "stream" 1 779 "int8" `522 
v L "bits" 1 779 "int8" `526 
f G "spi_xfer_in" 1 779 "int16(int8 stream,int8 bits)" `524 
v L "stream" 1 780 "int8" `522 
v L "bits" 1 780 "int8" `529 
f G "spi_xfer_in" 1 780 "int32(int8 stream,int8 bits)" `527  "#use rtos() Prototypes:"
f B "rtos_run" 1 783 "void()" `530 
f B "rtos_yield" 1 784 "void()" `531 
v L "task" 1 785 "int8" `533 
f B "rtos_enable" 1 785 "void(int8 task)" `532 
v L "task" 1 786 "int8" `535 
f B "rtos_disable" 1 786 "void(int8 task)" `534 
f B "rtos_terminate" 1 787 "void()" `536 
v L "flag" 1 788 "int8" `538 
f B "rtos_await" 1 788 "void(int8 flag)" `537 
v L "sem" 1 789 "int8" `540 
f B "rtos_wait" 1 789 "void(int8 sem)" `539 
v L "sem" 1 790 "int8" `542 
f B "rtos_signal" 1 790 "void(int8 sem)" `541 
v L "task" 1 791 "int8" `544 
v L "msg" 1 791 "int8" `545 
f B "rtos_msg_send" 1 791 "void(int8 task,int8 msg)" `543 
f B "rtos_msg_read" 1 792 "int8()" `546 
f B "rtos_msg_poll" 1 793 "int8()" `547 
v L "task" 1 794 "int8" `549 
f B "rtos_overrun" 1 794 "int8(int8 task)" `548 
v L "task" 1 795 "int8" `551 
v L "stat" 1 795 "*int8" `552 
f B "rtos_stats" 1 795 "void(int8 task,*int8 stat)" `550  "#use timer() Prototypes:"
f B "get_ticks" 1 798 "int8()" `553 
f G "get_ticks" 1 799 "int16()" `554 
f G "get_ticks" 1 800 "int32()" `555 
v L "stream" 1 801 "int8" `557 
f G "get_ticks" 1 801 "int8(int8 stream)" `556 
v L "stream" 1 802 "int8" `559 
f G "get_ticks" 1 802 "int16(int8 stream)" `558 
v L "stream" 1 803 "int8" `561 
f G "get_ticks" 1 803 "int32(int8 stream)" `560 
v L "value" 1 804 "int8" `563 
f B "set_ticks" 1 804 "void(int8 value)" `562 
v L "value" 1 805 "int16" `565 
f G "set_ticks" 1 805 "void(int16 value)" `564 
v L "value" 1 806 "int32" `567 
f G "set_ticks" 1 806 "void(int32 value)" `566 
v L "stream" 1 807 "int8" `569 
v L "value" 1 807 "int8" `570 
f G "set_ticks" 1 807 "void(int8 stream,int8 value)" `568 
v L "stream" 1 808 "int8" `569 
v L "value" 1 808 "int16" `573 
f G "set_ticks" 1 808 "void(int8 stream,int16 value)" `571 
v L "stream" 1 809 "int8" `569 
v L "value" 1 809 "int32" `576 
f G "set_ticks" 1 809 "void(int8 stream,int32 value)" `574  "#use pwm() Prototypes:"
f B "pwm_on" 1 812 "void()" `577 
v L "stream" 1 813 "int8" `579 
f G "pwm_on" 1 813 "void(int8 stream)" `578 
f B "pwm_off" 1 814 "void()" `580 
v L "stream" 1 815 "int8" `582 
f G "pwm_off" 1 815 "void(int8 stream)" `581 
v L "duty" 1 816 "int16" `584 
f B "pwm_set_duty" 1 816 "void(int16 duty)" `583 
v L "stream" 1 817 "int8" `586 
v L "duty" 1 817 "int16" `587 
f G "pwm_set_duty" 1 817 "void(int8 stream,int16 duty)" `585 
v L "percent" 1 818 "int16" `589 
f B "pwm_set_duty_percent" 1 818 "void(int16 percent)" `588 
v L "stream" 1 819 "int8" `591 
v L "percent" 1 819 "int16" `592 
f G "pwm_set_duty_percent" 1 819 "void(int8 stream,int16 percent)" `590 
v L "frequency" 1 820 "int32" `594 
f B "pwm_set_frequency" 1 820 "void(int32 frequency)" `593 
v L "stream" 1 821 "int8" `596 
v L "frequency" 1 821 "int32" `597 
f G "pwm_set_frequency" 1 821 "void(int8 stream,int32 frequency)" `595  "#use capture() Prototypes:"
f B "get_capture_time" 1 824 "int16()" `598 
v L "stream" 1 825 "int8" `600 
f G "get_capture_time" 1 825 "int16(int8 stream)" `599 
f B "get_capture_event" 1 826 "int8()" `601 
v L "stream" 1 827 "int8" `603 
f G "get_capture_event" 1 827 "int8(int8 stream)" `602  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 840 "int16" `605 
f B "goto_address" 1 840 "void(int16 address)" `604 
v L "label" 1 841 "int16" `607 
f B "label_address" 1 841 "int16(int16 label)" `606  "Program Memory Prototypes:"
v L "address" 1 844 "int16" `609 
v L "dataptr" 1 844 "*int8" `610 
v L "count" 1 844 "int16" `611 
f B "read_program_memory" 1 844 "void(int16 address,*int8 dataptr,int16 count)" `608 
v L "address" 1 845 "int16" `613 
f B "read_program_eeprom" 1 845 "int16(int16 address)" `612 
v L "address" 1 846 "int16" `615 
f B "erase_program_eeprom" 1 846 "void(int16 address)" `614 
v L "address" 1 847 "int16" `617 
v L "dataptr" 1 847 "*int8" `618 
v L "count" 1 847 "int16" `619 
f B "write_program_memory" 1 847 "void(int16 address,*int8 dataptr,int16 count)" `616 
v L "address" 1 848 "int16" `621 
v L "data" 1 848 "int16" `622 
f B "write_program_eeprom" 1 848 "void(int16 address,int16 data)" `620  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 853 "int16" `623 
v L "address" 1 858 "__EEADDRESS__" `625 
f B "read_eeprom" 1 858 "int8(__EEADDRESS__ address)" `624 
v L "address" 1 859 "__EEADDRESS__" `627 
v L "value" 1 859 "int8" `628 
f B "write_eeprom" 1 859 "void(__EEADDRESS__ address,int8 value)" `626  "#use touchpad() Prototypes:"
v L "state" 1 862 "int8" `630 
f B "touchpad_state" 1 862 "void(int8 state)" `629 
f B "touchpad_getc" 1 863 "int8()" `631 
f B "touchpad_hit" 1 864 "int8()" `632  "INT"
c L "touchpad_hit" 1 1 4 "FUNCTION"
v L "interrupt" 1 870 "int32" `634 
f B "enable_interrupts" 1 870 "void(int32 interrupt)" `633 
v L "interrupt" 1 871 "int32" `636 
f B "disable_interrupts" 1 871 "void(int32 interrupt)" `635 
v L "interrupt" 1 872 "int32" `638 
f B "clear_interrupt" 1 872 "void(int32 interrupt)" `637 
v L "interrupt" 1 873 "int32" `640 
f B "interrupt_active" 1 873 "int8(int32 interrupt)" `639 
v L "interrupt" 1 874 "int32" `642 
f B "interrupt_enabled" 1 874 "int8(int32 interrupt)" `641 
v L "source" 1 875 "int8" `644 
v L "edge" 1 875 "int8" `645 
f B "ext_int_edge" 1 875 "void(int8 source,int8 edge)" `643 
v L "address" 1 876 "int16" `647 
f B "jump_to_isr" 1 876 "void(int16 address)" `646  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 878 "0x40"
d G "H_TO_L" 1 879 "0"
d G "GLOBAL" 1 881 "0x0BC0"
d G "PERIPH" 1 882 "0x0B40"
d G "INT_EXT_L2H" 1 883 "0x50000B10"
d G "INT_EXT_H2L" 1 884 "0x60000B10"
d G "INT_EXT" 1 885 "0x300B10"
d G "INT_TIMER0" 1 886 "0x300B20"
d G "INT_TIMER1" 1 887 "0x309101"
d G "INT_TIMER2" 1 888 "0x309102"
d G "INT_CCP1" 1 889 "0x309104"
d G "INT_SSP" 1 890 "0x309108"
d G "INT_TBE" 1 891 "0x309110"
d G "INT_RDA" 1 892 "0x309120"
d G "INT_AD" 1 893 "0x309140"
d G "INT_TIMER1_GATE" 1 894 "0x309180"
d G "INT_BUSCOL" 1 895 "0x309208"
d G "INT_EEPROM" 1 896 "0x309210"
d G "INT_COMP" 1 897 "0x309220"
d G "INT_COMP2" 1 898 "0x309240"
d G "INT_OSC_FAIL" 1 899 "0x309280"
d G "INT_TIMER4" 1 900 "0x309302"
d G "INT_TIMER6" 1 901 "0x309308"
d G "INT_CCP3" 1 902 "0x309310"
d G "INT_CCP4" 1 903 "0x309320"
d G "INT_CCP2" 1 904 "0x309201"
d G "INT_RA" 1 905 "0x30FF0B08"
d G "INT_RA0" 1 906 "0x30010B08"
d G "INT_RA0_L2H" 1 907 "0x10010B08"
d G "INT_RA0_H2L" 1 908 "0x20010B08"
d G "INT_RA1" 1 909 "0x30020B08"
d G "INT_RA1_L2H" 1 910 "0x10020B08"
d G "INT_RA1_H2L" 1 911 "0x20020B08"
d G "INT_RA2" 1 912 "0x30040B08"
d G "INT_RA2_L2H" 1 913 "0x10040B08"
d G "INT_RA2_H2L" 1 914 "0x20040B08"
d G "INT_RA3" 1 915 "0x30080B08"
d G "INT_RA3_L2H" 1 916 "0x10080B08"
d G "INT_RA3_H2L" 1 917 "0x20080B08"
d G "INT_RA4" 1 918 "0x30100B08"
d G "INT_RA4_L2H" 1 919 "0x10100B08"
d G "INT_RA4_H2L" 1 920 "0x20100B08"
d G "INT_RA5" 1 921 "0x30200B08"
d G "INT_RA5_L2H" 1 922 "0x10200B08"
d G "INT_RA5_H2L" 1 923 "0x20200B08"
C L "jump_to_isr" 0 13 2 "FUNCTION"
C L "jump_to_isr" 0 13 1 "FUNCTION"
C L "jump_to_isr" 0 13 1 "FUNCTION"
C L "jump_to_isr" 0 13 1 "FUNCTION"
C L "jump_to_isr" 3 3 1 "FUNCTION"
C L "jump_to_isr" 3 3 1 "FUNCTION"
C L "jump_to_isr" 3 3 2 "FUNCTION"
V L "bytefor595" 3 9 "int8" `667 
f G "HC74595_send" 3 9 "void(int8 bytefor595)" `666 
f G "HC74595_Latch" 3 10 "void()" `668 
f G "HC74595_Clk" 3 11 "void()" `669 
V L "bytefor595" 2 6 "int8" `671 
F G "HC74595_send" 2 6 "void(int8 bytefor595)" `666 
V L "caa" 2 7 "int8" `670 
F G "HC74595_Latch" 2 19 "void()" `668 
F G "HC74595_Clk" 2 26 "void()" `669 
C L "MAIN" 0 30 25 "FUNCTION"
F G "MAIN" 0 70 "void()" `671  "set_timer1(0);"
C L "MAIN" 0 30 3 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_dsm" 1 3
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
